deepdive {
  
  db.default {
    driver: "com.mysql.jdbc.Driver"
    url: "jdbc:mysql://"${DBHOST}":"${DBPORT}"/"${DBNAME}  # "
    user: ${DBUSER}
    password: ${DBPASSWORD}
    dbname: ${DBNAME}
    host: ${DBHOST}
    port: ${DBPORT}
  }

  # Put your variables here
  schema.variables {
    has_spouse.is_true: Boolean
  }

  # Put your extractors here
  extraction.extractors {

    # Clean output tables of all extractors
    ext_clear_table {
      style: "sql_extractor"
      sql: """
        DELETE FROM people_mentions;
        DELETE FROM has_spouse;
        DELETE FROM has_spouse_features;
        """
    }

    # Create indexes to speed up mysql join queries
    ext_create_index_sentences {
      style: "sql_extractor"
      sql: """
        CREATE INDEX sentences_sentence_id_idx ON sentences(sentence_id);
      """
      dependencies: ["ext_clear_table"]
    }

    # With a tsv_extractor, developers have to make sure arrays 
      # are parsable in the UDF. One easy way is to 
      # use "array_to_string(array, delimiter)" function by psql.
    ext_people {
      input: """
          SELECT  sentence_id, 
                  words,
                  ner_tags
          FROM    sentences
          """
      output_relation: "people_mentions"
      udf: ${APP_HOME}"/udf/ext_people.py"
      dependencies: ["ext_create_index_sentences"]
      input_batch_size: 4000
      style: "tsv_extractor"
      loader: "ndbloader"
      loader_config: {
        threads: 4
        schema: ${APP_HOME}"/mysqlcluster/people_mentions.loaderschema"
        parallel_transactions: 100
        connection: "127.0.0.1:1186"
      }

    }

    # Speedup mysql query performance by indexing
    ext_create_index_people {
      style: "sql_extractor"
      sql: """
        CREATE INDEX people_mentions_sentence_id_idx ON people_mentions(sentence_id);
        CREATE INDEX people_mentions_mention_id_idx ON people_mentions(mention_id);
      """
      dependencies: ["ext_people"]
    }

    ext_has_spouse_candidates {
      # This query is dramatically slow...
      input: """
       SELECT p1.sentence_id, 
              p1.mention_id, p1.text, 
              p2.mention_id, p2.text
        FROM  people_mentions p1, 
              people_mentions p2
        WHERE p1.sentence_id = p2.sentence_id 
          AND p1.mention_id != p2.mention_id 

          """
      output_relation: "has_spouse"
      udf: ${APP_HOME}"/udf/ext_has_spouse.py"
      dependencies: ["ext_create_index_people"]
      # dependencies: ["ext_people"]
      style: "tsv_extractor"
      loader: "ndbloader"
      loader_config: {
        threads: 4
        schema: ${APP_HOME}"/mysqlcluster/has_spouse.loaderschema"
        parallel_transactions: 100
        connection: "127.0.0.1:1186"
      }

    }

    # Create indexes to speed up mysql join queries
    ext_create_index_has_spouse {
      style: "sql_extractor"
      sql: """
        CREATE INDEX has_spouse_sentence_id_idx ON has_spouse(sentence_id);
        CREATE INDEX has_spouse_person1_id_idx ON has_spouse(person1_id);
        CREATE INDEX has_spouse_person2_id_idx ON has_spouse(person2_id);
      """

      dependencies: ["ext_has_spouse_candidates"]
    }
    ext_has_spouse_features {
      input: """
        SELECT  words,
                has_spouse.relation_id, 
                p1.start_position, 
                p1.length, 
                p2.start_position, 
                p2.length
        FROM    has_spouse, 
                people_mentions p1, 
                people_mentions p2,
                sentences
        WHERE   has_spouse.person1_id = p1.mention_id 
          AND   has_spouse.person2_id = p2.mention_id 
          AND   has_spouse.sentence_id = sentences.sentence_id

        """
      output_relation: "has_spouse_features"
      udf: ${APP_HOME}"/udf/ext_has_spouse_features.py"
      dependencies: ["ext_create_index_has_spouse"]
      style: "tsv_extractor"
      loader: "ndbloader"
      loader_config: {
        threads: 4
        schema: ${APP_HOME}"/mysqlcluster/has_spouse_features.loaderschema"
        parallel_transactions: 100
        connection: "127.0.0.1:1186"
      }

    }

    # Create indexes to speed up mysql join queries
    ext_create_index_features {
      style: "sql_extractor"
      sql: """
        CREATE INDEX has_spouse_features_relation_id_idx ON has_spouse_features(relation_id);
      """
      dependencies: ["ext_has_spouse_features"]
    }
  }

  inference.factors: { 

    # We require developers to select: 
    #   - reserved "id" column, 
    #   - variable column, 
    #   - weight dependencies,
    # for variable tables.
    f_has_spouse_features {
      input_query: """
        SELECT  has_spouse.id AS "has_spouse.id", 
                has_spouse.is_true AS "has_spouse.is_true", 
                feature 
        FROM    has_spouse, 
                has_spouse_features 
        WHERE   has_spouse_features.relation_id = has_spouse.relation_id
        """
      function: "IsTrue(has_spouse.is_true)"
      weight: "?(feature)"
    }

    f_has_spouse_symmetry {
      input_query: """
        SELECT  r1.is_true AS "has_spouse.r1.is_true", 
                r2.is_true AS "has_spouse.r2.is_true", 
                r1.id AS "has_spouse.r1.id", 
                r2.id AS "has_spouse.r2.id"
        FROM    has_spouse r1, 
                has_spouse r2 
        WHERE   r1.person1_id = r2.person2_id 
          AND   r1.person2_id = r2.person1_id
          """
      function: "Equal(has_spouse.r1.is_true, has_spouse.r2.is_true)"
      # weight: "10" # We are pretty sure about this rule
      weight: "?" # We are pretty sure about this rule
    }

  }

  # # An example of how to use the last factor graph!
  # pipeline.relearn_from: ${DEEPDIVE_HOME}"/out/2014-04-19T190341/"

  # # If you want to re-extract all sentences:
  # pipeline.run: "nlp"
  # pipeline.pipelines.nlp: ["ext_sentences"]
  pipeline.run: "nonlp"
  # pipeline.run: "inference"
  pipeline.pipelines.nonlp: [
    "ext_people",
    "ext_create_index_people",
    "ext_has_spouse_candidates",
    "ext_create_index_has_spouse",
    "ext_has_spouse_features",
    "ext_create_index_features",
    "f_has_spouse_features", "f_has_spouse_symmetry"
    ]
  pipeline.pipelines.inference: [
    "f_has_spouse_features", "f_has_spouse_symmetry"
    ]

  # Specify a holdout fraction
  calibration.holdout_fraction: 0.25
  # sampler.sampler_args: "-l 1000 -s 1 -i 1000 --alpha 0.1 --diminish 0.99"

}
