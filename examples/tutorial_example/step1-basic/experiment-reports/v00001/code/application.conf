deepdive {

  db.default {
    driver: "org.postgresql.Driver"
    url: "jdbc:postgresql://"${PGHOST}":"${PGPORT}"/"${DBNAME} # "
    user: ${PGUSER}
    password: ${PGPASSWORD}
    dbname: ${DBNAME}
    host: ${PGHOST}
    port: ${PGPORT}
  }

  # Put your variables here
  schema.variables {
    has_spouse.is_true: Boolean
  }

  # Put your extractors here
  extraction.extractors {

    # With a tsv_extractor, developers have to make sure arrays 
      # are parsable in the UDF. One easy way is to 
      # use "array_to_string(array, delimiter)" function by psql.
    ext_people {
      input: """
          SELECT  sentence_id, 
                  array_to_string(words, '~^~'), 
                  array_to_string(ner_tags, '~^~') 
          FROM    sentences
          """
      output_relation: "people_mentions"
      before: ${APP_HOME}"/udf/ext_truncate_table.sh people_mentions"
      udf: ${APP_HOME}"/udf/ext_people.py"
      dependencies: ["ext_sentences"]
      style: "tsv_extractor"
    }

    ext_has_spouse_candidates {
      input: """
       SELECT p1.sentence_id,
              p1.mention_id, p1.text, 
              p2.mention_id, p2.text
        FROM  people_mentions p1, 
              people_mentions p2
        WHERE p1.sentence_id = p2.sentence_id
          AND p1.mention_id != p2.mention_id;
          """
      output_relation: "has_spouse"
      before: ${APP_HOME}"/udf/ext_truncate_table.sh has_spouse"
      udf: ${APP_HOME}"/udf/ext_has_spouse.py"
      dependencies: ["ext_people"]
      style: "tsv_extractor"
    }

    ext_has_spouse_features {
      input: """
        SELECT  array_to_string(words, '~^~'), 
                has_spouse.relation_id, 
                p1.start_position, 
                p1.length, 
                p2.start_position, 
                p2.length
        FROM    has_spouse, 
                people_mentions p1, 
                people_mentions p2, 
                sentences
        WHERE   has_spouse.person1_id = p1.mention_id 
          AND   has_spouse.person2_id = p2.mention_id 
          AND   has_spouse.sentence_id = sentences.sentence_id;
        """
      output_relation: "has_spouse_features"
      before: ${APP_HOME}"/udf/ext_truncate_table.sh has_spouse_features"
      udf: ${APP_HOME}"/udf/ext_has_spouse_features.py"
      dependencies: ["ext_has_spouse_candidates"]
      style: "tsv_extractor"
    }

  }

  inference.factors: { 

    # We require developers to select: 
    #   - reserved "id" column, 
    #   - variable column, 
    #   - weight dependencies,
    # for variable tables.
    f_has_spouse_features {
      input_query: """
        SELECT  has_spouse.id AS "has_spouse.id", 
                has_spouse.is_true AS "has_spouse.is_true", 
                feature 
        FROM    has_spouse, 
                has_spouse_features 
        WHERE   has_spouse_features.relation_id = has_spouse.relation_id
        """
      function: "IsTrue(has_spouse.is_true)"
      weight: "?(feature)"
    }
  }

  # # An example of how to use the last factor graph:
  # pipeline.relearn_from: ${DEEPDIVE_HOME}"/out/2014-04-19T190341/"

  # Default is to use the full pipeline, equivalent to:
  pipeline.run: "all"
  pipeline.pipelines.all: [
    # "ext_people",
    # "ext_has_spouse_candidates",
    # "ext_has_spouse_features",
    "f_has_spouse_features"
    ]

  # # Specify a holdout fraction to hold out randomly
  # calibration.holdout_fraction: 0.25

  # A more scientific way is to hold out by sentence:
  calibration.holdout_query:"""
    DROP TABLE IF EXISTS holdout_sentence_ids CASCADE; 

    CREATE TABLE holdout_sentence_ids AS 
    SELECT sentence_id FROM sentences WHERE RANDOM() < 0.25;

    INSERT INTO dd_graph_variables_holdout(variable_id)
    SELECT id FROM has_spouse WHERE sentence_id IN
    (SELECT * FROM holdout_sentence_ids);
  """

  # You may also try tuning sampler arguments:
  # sampler.sampler_args: "-l 1000 -s 1 -i 1000 --alpha 0.1 --diminish 0.99"

}
